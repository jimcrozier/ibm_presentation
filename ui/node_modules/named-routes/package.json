{
  "name": "named-routes",
  "version": "2.0.5",
  "description": "Named routes for node.js. Works with express and independently",
  "main": "router.js",
  "scripts": {
    "test": "mocha test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/alubbe/named-routes"
  },
  "bugs": {
    "url": "https://github.com/alubbe/named-routes/issues"
  },
  "keywords": [
    "named",
    "routes",
    "i18n",
    "router",
    "reversable",
    "express",
    "web"
  ],
  "author": {
    "name": "Andreas Lubbe",
    "email": "npm@lubbe.org"
  },
  "license": "MIT",
  "dependencies": {
    "methods": "^1.1.1",
    "path-to-regexp": "^1.2.1",
    "xregexp": "^3.1.0"
  },
  "devDependencies": {
    "expect.js": "^0.3.1",
    "express": "^4.12.3",
    "mocha": "^2.4.5",
    "sinon": "^1.17.2",
    "supertest": "^1.1.0"
  },
  "readme": "# Named Routes for node.js\n\nA node.js module for naming HTTP routes. Can be used with the [express.js](http://expressjs.com/) framework or independently as standalone. Originally based on antitoxic's  [node-reversable-router](https://github.com/web-napopa/node-reversable-router).\n\n**Feature overview**:\n - Support for named routes\n - Can be used standalone or as replacement for express.js 4 routing (see named-routes 1.1.4 for express 3).\n - URLs can be generated by providing a `name` of the route and the required `parameters`\n - Support for optional parts in the route `path` (and URL generation still works with as many optional parts as you want)\n - Support for anonymous `*` parameters inside the path\n - Supports converting the last anonymous parameter to pairs of `param`=>`value` separated by `/`\n - Improved performance on literal matches\n - Supports callbacks for router parameters. Same logic as `express` native router.\n - Supports middleware route callbacks. Same logic as `express` native router.\n - Supports array of middleware route callbacks. Same logic as `express` native router.\n\n## Install\n\n```\nnpm install named-routes\n```\n\n## Features\n\n### Example\n#### As a replacement for express framework router\nIn the view files:\n```js\nurl('admin.user.edit', {id: 2}) // /admin/user/2\n```\n\n... and in the server config:\n```js\nvar express = require('express');\nvar app = express();\n\nvar Router = require('named-routes');\nvar router = new Router();\nrouter.extendExpress(app);\nrouter.registerAppHelpers(app);\n\napp.get('/admin/user/:id', 'admin.user.edit', function(req, res, next){\n    // for POST, PUT, DELETE, etc. replace 'get' with 'post', 'put', 'delete', etc.\n\n    //... implementation\n\n    // the names can also be accessed here:\n    var url = app.namedRoutes.build('admin.user.edit', {id: 2}); // /admin/user/2\n\n    // the name of the current route can be found at req.route.name\n});\n\napp.listen(3000);\n```\nPlease note: in this mode, route paths are matched by express.\nYou can use these patterns: http://expressjs.com/guide/routing.html#route-paths\n\n\n#### As a standalone\n\n```js\nvar Router = require('named-routes')();\nvar router = new Router();\n\nrouter.add('get', '/admin/user/:id', function(req, res, next) {\n    var url = router.build('admin.user.edit', {id: 2}); // /admin/user/2\n}, {\n    name: 'admin.user.edit'\n});\n\n//... in a request handler\nrouter.dispatch(req);\n```\n\n### Benefits of named routes\nYou can easily check the current route in middleware without stating the defined route path. Thus avoding duplication and keeping route paths in a central place.\n\nThis allows the path to the route to be changed as frequently while the rest of the logic across middleware or views to remain the same.\n\n### Generating URLs\nURLs are generated by passing the route name and, optionally, parameters.\n\nIf you're using express:\n```js\napp.get('/about', 'about', function(req, res, next){ .. }\napp.get('/todo/:user/:list/:id', 'todo.user.list.id', function(req, res, next){ .. }\n\n// in the views:\nurl('about') // '/about'\nurl('todo.user.list.id', {user: 'foo', list: 93, id: 1337}) // '/todo/foo/93/1337'\nurl('todo.user.list.id', {user: 'foo', list: 93}) // Throws error, missing parameters\n\n// anywhere else:\napp.namedRoutes.build('about') // '/about'\napp.namedRoutes.build('todo.user.list.id', {user: 'foo', list: 93, id: 1337}) // '/todo/foo/93/1337'\napp.namedRoutes.build('todo.user.list.id', {user: 'foo', list: 93}) // Throws error, missing parameters\n```\n\nAs a standalone:\n\n```js\nrouter.add('get', '/about', function(req, res, next) {...}, {name:'about'})\nrouter.add('get', '/todo/:user/:list/:id', function(req, res, next) {...}, {name:'todo.user.list.id'})\n\nrouter.build('about') // '/about'\nrouter.build('todo.user.list.id', {user: 'foo', list: 93, id: 1337}) // '/todo/foo/93/1337'\nrouter.build('todo.user.list.id', {user: 'foo', list: 93}) // Throws error, missing parameters\n```\n\n### AJAX\nWhile forgetting to pass a parameter (or setting its value equal to ```undefined```) will trigger an error, you can also pass ```null``` as a parameter value to signal that you would it to be intentionally left blank (including the associated '/' character). This can be helpful when hard-coding ajax urls into front-end javascript.\n\n```js\napp.get('/todo/:user/:list/:id', 'todo.user.list.id', function(req, res, next){ .. }\n\n// this will build simply '/todo/foo':\nurl('todo.user.list.id', {user: 'foo', list: null, id: null});\n\n// useful for writing routes into ajax requests\nvar getTodo = '!{url('todo.user.list.id', {user: 'foo', list: null, id: null})}';\n$http.get( getTodo + '/' + listID + '/' + id, function(){...})\n```\n\nThe above assumes you are working in an express view. If you are not, swap out ```url``` with  ```app.namedRoutes.build``` if you are in express but outside the view and ```app.get``` with ```router.add``` and ```url``` with ```router.build``` if you using module standalone.\n\n\n## Features exclusive to stand-alone mode\n\n### Full support for optional parts of the URL\nYou can define routes like this:\n\n```js\nrouter.add('get', '/admin/(user/(edit/:id/)(album/:albumId/):session/)test', 'admin', function(req, res, next){\n    console.log(req.params);\n});\n```\n\nBrackets define the limits of the optional parts. Here you have 3 optional parts. 2 of them nested in the other.\n\nIf you don't pass all the parameters inside a optional part, the part will simply be removed from the generated URL.\n\nSo in the views:\n```js\nurl('admin', {id: 4, albumId:2, session: 'qwjdoqiwdasdj12asdiaji198a#asd'});\n// will generate: /admin/user/edit/4/album/2/qwjdoqiwdasdj12asdiaji198a/test\n```\n```js\nurl('admin', {id: 4, session: 'qwjdoqiwdasdj12asdiaji198a#asd'});\n// will generate: /admin/user/edit/4/qwjdoqiwdasdj12asdiaji198a/test\n```\n```js\nurl('admin', {albumId: 2, session: 'qwjdoqiwdasdj12asdiaji198a#asd'});\n// will generate: /admin/user/album/2/qwjdoqiwdasdj12asdiaji198a/test\n```\n```js\nurl('admin', {id: 4, albumId:2});\n// will generate: /admin/test\n// because :session parameter is missing and the optional part\n// that contains it contains also the other 2 parts\n```\n\n### Improved matching speed for literal matches\nSignificant amount of the routes in an web applications are simply hardcoded strings. Things like `/admin` or `/user/login`.\nSuch routes will be matched with direct check for equallity without the need for a regular expression execution.\n\n### Anonymous `*` parameters inside the path\n```js\nrouter.add('get', '/admin/*/user/*/:id/', 'admin.user.edit', function(req, res, next) {\n    console.log(req.params)\n});\n```\nRequesting: `/admin/any/user/thing/2` will output:\n```\n{\n  _masked: [ 'any', 'thing'],\n  id: '2'\n}\n```\n\nAnalogous in order to generate the same url:\n```js\nurl('admin.user.edit', {id:2, _masked: ['any','thing']})\n```\n\n### Converting the trailing `*` anonymous parameter to multiple `name:value` parameters\n```js\nrouter.add('get', '/admin/*/user/*/:id/albums/*', 'admin.user.edit', function(req, res, next) {\n    console.log(req.params)\n}, {\n    wildcardInPairs: true\n});\n```\nRequesting: `/admin/any/user/thing/2/albums/sort/name/order/desc` will output:\n```\n{\n  _masked: [ 'any', 'thing'],\n  id: '2',\n  sort: 'name',\n  order: 'desc'\n}\n```\n\nAnalogous in order to generate the same url:\n```js\nurl('admin.user.edit', {id:2, _masked: ['any','thing'], sort: 'name', 'order': 'desc'})\n```\n\n\n## Future development planned\n\n### Publish\n - Organise and publish tests\n\n### Implement\n - Query based routing and generation\n\n### Investigate\n**meta-routing** Middleware depending on media? mobile, desktop, agent\n\n## License\n(The MIT License)\n\nCopyright (c) 2014-2016 Andreas Lubbe <npm@lubbe.org>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "named-routes@2.0.5",
  "dist": {
    "shasum": "12b04f6ab31840462df7498a5f2d35e0df4384ed"
  },
  "_from": "named-routes@^2.0.3",
  "_resolved": "https://registry.npmjs.org/named-routes/-/named-routes-2.0.5.tgz"
}
